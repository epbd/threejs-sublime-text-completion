{
	 "scope": "source.js,source.js.embedded.html,source.coffee,source.ts",
	 "version": "r85", // Based on r85 completions, with some fixes.
	 "completions":
	 [
		"THREE",
		
		/**
			INDEX
			
			1. Constants.
			2. Methods.
		**/
		
		/*==================================
		=           1. Constants.          =
		==================================*/
		
		/*==========  Custom Blending Equation.  ==========*/
		
		// Equations
		"THREE.AddEquation",
		"THREE.SubtractEquation",
		"THREE.ReverseSubtractEquation",
		"THREE.MinEquation",
		"THREE.MaxEquation",
		
		// Destination Factors
		"THREE.ZeroFactor",
		"THREE.OneFactor",
		"THREE.SrcColorFactor",
		"THREE.OneMinusSrcColorFactor",
		"THREE.SrcAlphaFactor",
		"THREE.OneMinusSrcAlphaFactor",
		"THREE.DstAlphaFactor",
		"THREE.OneMinusDstAlphaFactor",
		
		// Source Factors
		"THREE.DstColorFactor",
		"THREE.OneMinusDstColorFactor",
		"THREE.SrcAlphaSaturateFactor",
		
		/*==========  Materials.  ==========*/
		
		// Side.
		"THREE.FrontSide",
		"THREE.BackSide",
		"THREE.DoubleSide",
		
		// Shading.
		"THREE.NoShading",
		"THREE.FlatShading",
		"THREE.SmoothShading",
		
		// Colors.
		"THREE.NoColors",
		"THREE.FaceColors",
		"THREE.VertexColors",
		
		// Blending Mode.
		"THREE.NoBlending",
		"THREE.NormalBlending",
		"THREE.AdditiveBlending",
		"THREE.SubtractiveBlending",
		"THREE.MultiplyBlending",
		"THREE.CustomBlending",

		// Depth Mode
		"THREE.NeverDepth",
		"THREE.AlwaysDepth",
		"THREE.LessDepth",
		"THREE.LessEqualDepth",
		"THREE.GreaterEqualDepth",
		"THREE.GreaterDepth",
		"THREE.NotEqualDepth",
		
		/*==========  GL State.  ==========*/

		// Cull Face
		"THREE.CullFaceNone",
		"THREE.CullFaceBack",
		"THREE.CullFaceFront",
		"THREE.CullFaceFrontBack",
		
		// Front Face Direction
		"THREE.FrontFaceDirectionCW",
		"THREE.FrontFaceDirectionCCW",
		
		/*==========  Shadowing Type.  ==========*/

		// Shadow Map
		"THREE.BasicShadowMap",
		"THREE.PCFShadowMap",
		"THREE.PCFSoftShadowMap",

		/*==========  Tone Mapping.  ==========*/

		"THREE.NoToneMapping",
		"THREE.LinearToneMapping",
		"THREE.ReinhardToneMapping",
		"THREE.Uncharted2ToneMapping",
		"THREE.CineonToneMapping",

		/*==========  Texture.  ==========*/
		
		// Operations
		"THREE.MultiplyOperation",
		"THREE.MixOperation",
		"THREE.AddOperation",
		
		// Mapping Modes
		"THREE.UVMapping",
		"THREE.CubeReflectionMapping",
		"THREE.CubeRefractionMapping",
		"THREE.EquirectangularReflectionMapping",
		"THREE.EquirectangularRefractionMapping",
		"THREE.SphericalReflectionMapping",
		"THREE.CubeUVReflectionMapping",
		"THREE.CubeUVRefractionMapping",
		
		// Wrapping Modes
		"THREE.RepeatWrapping",
		"THREE.ClampToEdgeWrapping",
		"THREE.MirroredRepeatWrapping",
		
		// Filters
		"THREE.NearestFilter",
		"THREE.NearestMipMapNearestFilter",
		"THREE.NearestMipMapLinearFilter",
		"THREE.LinearFilter",
		"THREE.LinearMipMapNearestFilter",
		"THREE.LinearMipMapLinearFilter",
		
		// Data Types
		"THREE.UnsignedByteType",
		"THREE.ByteType",
		"THREE.ShortType",
		"THREE.UnsignedShortType",
		"THREE.IntType",
		"THREE.UnsignedIntType",
		"THREE.FloatType",
		"THREE.HalfFloatType",
		
		// Pixel Types
		"THREE.UnsignedShort4444Type",
		"THREE.UnsignedShort5551Type",
		"THREE.UnsignedShort565Type",
		"THREE.UnsignedInt248Type",
		
		// Pixel Formats
		"THREE.AlphaFormat",
		"THREE.RGBFormat",
		"THREE.RGBAFormat",
		"THREE.LuminanceFormat",
		"THREE.LuminanceAlphaFormat",
		"THREE.RGBEFormat",
		"THREE.DepthFormat",
		"THREE.DepthStencilFormat",
		
		// DDS / ST3C Compressed Texture Formats
		"THREE.RGB_S3TC_DXT1_Format",
		"THREE.RGBA_S3TC_DXT1_Format",
		"THREE.RGBA_S3TC_DXT3_Format",
		"THREE.RGBA_S3TC_DXT5_Format",
		
		// PVRTC Compressed Texture Formats
		"THREE.RGB_PVRTC_4BPPV1_Format",
		"THREE.RGB_PVRTC_2BPPV1_Format",
		"THREE.RGBA_PVRTC_4BPPV1_Format",
		"THREE.RGBA_PVRTC_2BPPV1_Format",

		// ETC Compressed Texture Format
		"THREE.RGB_ETC1_Format",

		// Encoding
		"THREE.LinearEncoding",
		"THREE.sRGBEncoding",
		"THREE.GammaEncoding",
		"THREE.RGBEEncoding",
		"THREE.LogLuvEncoding",
		"THREE.RGBM7Encoding",
		"THREE.RGBM16Encoding",
		"THREE.RGBDEncoding",
		"THREE.BasicDepthPacking",
		"THREE.RGBADepthPacking",

		/*==========  Animation.  ==========*/

		// Loop Modes
		"THREE.LoopOnce",
		"THREE.LoopRepeat",
		"THREE.LoopPingPong",

		// Interpolate Modes
		"THREE.InterpolateDiscrete",
		"THREE.InterpolateLinear",
		"THREE.InterpolateSmooth",

		// Ending Modes
		"THREE.ZeroCurvatureEnding",
		"THREE.ZeroSlopeEnding",
		"THREE.WrapAroundEnding",

		/*==========  Core Constants.  ==========*/

		// Mouse Button
		"THREE.MOUSE.LEFT",
		"THREE.MOUSE.MIDDLE",
		"THREE.MOUSE.RIGHT",

		/*==========  Draw Mode.  ==========*/

		// Mouse Button
		"THREE.TriangleDrawMode",
		"THREE.TriangleStripDrawMode",
		"THREE.TriangleFanDrawMode",
		
		/*================================
		=          2. Methods.           =
		================================*/
		
		{ "trigger": "SplineCurve\tTHREE.js Completion", "contents": "SplineCurve(  );$0" },
		{ "trigger": "QuadraticBezierCurve3\tTHREE.js Completion", "contents": "QuadraticBezierCurve3 ( v0, v1, v2 );$0" },
		{ "trigger": "QuadraticBezierCurve\tTHREE.js Completion", "contents": "QuadraticBezierCurve( v0, v1, v2 );$0" },
		{ "trigger": "LineCurve3\tTHREE.js Completion", "contents": "LineCurve3( v1, v2 );$0" },
		{ "trigger": "LineCurve\tTHREE.js Completion", "contents": "LineCurve( v1, v2 );$0" },
		{ "trigger": "EllipseCurve\tTHREE.js Completion", "contents": "EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );$0" },
		{ "trigger": "CubicBezierCurve3\tTHREE.js Completion", "contents": "CubicBezierCurve3( v0, v1, v2, v3 );$0" },
		{ "trigger": "CubicBezierCurve\tTHREE.js Completion", "contents": "CubicBezierCurve( v0, v1, v2, v3 );$0" },
		{ "trigger": "CatmullRomCurve3\tTHREE.js Completion", "contents": "CatmullRomCurve3(  );$0" },
		{ "trigger": "Font\tTHREE.js Completion", "contents": "Font( data );$0" },
		{ "trigger": "Raycaster\tTHREE.js Completion", "contents": "Raycaster( origin, direction, near, far );$0" },
		{ "trigger": "Layers\tTHREE.js Completion", "contents": "Layers(  );$0" },
		{ "trigger": "InterleavedBufferAttribute\tTHREE.js Completion", "contents": "InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized );$0" },
		{ "trigger": "InterleavedBuffer\tTHREE.js Completion", "contents": "InterleavedBuffer( array, stride );$0" },
		{ "trigger": "InstancedInterleavedBuffer\tTHREE.js Completion", "contents": "InstancedInterlevedBuffer( array, itemSize, meshPerAttribute );$0" },
		{ "trigger": "InstancedBufferGeometry\tTHREE.js Completion", "contents": "InstancedBufferGeometry(  );$0" },
		{ "trigger": "InstancedBufferAttribute\tTHREE.js Completion", "contents": "InstancedBufferAttribute( array, itemSize, meshPerAttribute );$0" },
		{ "trigger": "DirectGeometry\tTHREE.js Completion", "contents": "DirectGeometry(  );$0" },
		{ "trigger": "Audio\tTHREE.js Completion", "contents": "Audio( listener );$0" },
		{ "trigger": "AudioAnalyser\tTHREE.js Completion", "contents": "AudioAnalyser( sound, fftSize );$0" },
		{ "trigger": "AudioListener\tTHREE.js Completion", "contents": "AudioListener(  );$0" },
		{ "trigger": "AudioLoader\tTHREE.js Completion", "contents": "AudioLoader( context, manager );$0" },
		{ "trigger": "PositionalAudio\tTHREE.js Completion", "contents": "PositionalAudio( listener );$0" },
		{ "trigger": "PerspectiveCamera\tTHREE.js Completion", "contents": "PerspectiveCamera( fov, aspect, near, far );$0" },
		{ "trigger": "OrthographicCamera\tTHREE.js Completion", "contents": "OrthographicCamera( left, right, top, bottom, near, far );$0" },
		{ "trigger": "StereoCamera\tTHREE.js Completion", "contents": "StereoCamera(  );$0" },
		{ "trigger": "BufferAttribute\tTHREE.js Completion", "contents": "BufferAttribute( array, itemSize, normalized );$0" },
		{ "trigger": "Clock\tTHREE.js Completion", "contents": "Clock( autoStart );$0" },
		{ "trigger": "Color\tTHREE.js Completion", "contents": "Color( hex );$0" },
		{ "trigger": "Face3\tTHREE.js Completion", "contents": "Face3( a, b, c, normal, color, materialIndex );$0" },
		{ "trigger": "Face4\tTHREE.js Completion", "contents": "Face4( a, b, c, d, normal, color, materialIndex );$0" },
		{ "trigger": "Frustrum\tTHREE.js Completion", "contents": "Frustrum(  );$0" },
		{ "trigger": "Geometry\tTHREE.js Completion", "contents": "Geometry(  );$0" }, 				  
		{ "trigger": "Math\tTHREE.js Completion", "contents": "Math(  );$0" },
		{ "trigger": "Matrix3\tTHREE.js Completion", "contents": "Matrix3(  );$0" },
		{ "trigger": "Matrix4\tTHREE.js Completion", "contents": "Matrix4( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );$0" },
		{ "trigger": "Object3D\tTHREE.js Completion", "contents": "Object3D(  );$0" },
		{ "trigger": "Projector\tTHREE.js Completion", "contents": "Projector(  );$0" },
		{ "trigger": "Quaternion\tTHREE.js Completion", "contents": "Quaternion(  );$0" },
		{ "trigger": "Ray\tTHREE.js Completion", "contents": "Ray(  );$0" },
		{ "trigger": "Rectangle\tTHREE.js Completion", "contents": "Rectangle(  );$0" },
		{ "trigger": "Spline\tTHREE.js Completion", "contents": "Spline(  );$0" },
		{ "trigger": "UV\tTHREE.js Completion", "contents": "UV( u, v );$0" },
		{ "trigger": "Vector2\tTHREE.js Completion", "contents": "Vector2( x, y );$0" },
		{ "trigger": "Vector3\tTHREE.js Completion", "contents": "Vector3( x, y, z );$0" },
		{ "trigger": "Vector4\tTHREE.js Completion", "contents": "Vector4( x, y, z, w );$0" },
		{ "trigger": "Light\tTHREE.js Completion", "contents": "Light( color, intensity );$0" },
		{ "trigger": "AmbientLight\tTHREE.js Completion", "contents": "AmbientLight( color, intensity );$0" },
		{ "trigger": "DirectionalLight\tTHREE.js Completion", "contents": "DirectionalLight( hex, intensity );$0" },
		{ "trigger": "PointLight\tTHREE.js Completion", "contents": "PointLight( color, intensity, distance, decay );$0" },
		{ "trigger": "SpotLight\tTHREE.js Completion", "contents": "SpotLight( color, intensity, distance, angle, penumbra, decay );$0" },
		{ "trigger": "Loader\tTHREE.js Completion", "contents": "Loader(  );$0" },
		{ "trigger": "BinaryLoader\tTHREE.js Completion", "contents": "BinaryLoader(  );$0" },
		{ "trigger": "JSONLoader\tTHREE.js Completion", "contents": "JSONLoader(  );$0" },
		{ "trigger": "SceneLoader\tTHREE.js Completion", "contents": "SceneLoader(  );$0" },
		{ "trigger": "Material\tTHREE.js Completion", "contents": "Material( id, name, opacity, transparent, blending );$0" },
		{ "trigger": "LineBasicMaterial\tTHREE.js Completion", "contents": "LineBasicMaterial( color, linewidth, linecap, linejoin, vertexColors );$0" },
		{ "trigger": "MeshBasicMaterial\tTHREE.js Completion", "contents": "MeshBasicMaterial( color, map, shading, wireframe );$0" },
		{ "trigger": "MeshDepthMaterial\tTHREE.js Completion", "contents": "MeshDepthMaterial( morphTargets, wireframe, wireframeLinewidth );$0" },
		{ "trigger": "MeshFaceMaterial\tTHREE.js Completion", "contents": "MeshFaceMaterial( materials );$0" },
		{ "trigger": "MeshLambertMaterial\tTHREE.js Completion", "contents": "MeshLambertMaterial( color, map, shading, wireframe );$0" },
		{ "trigger": "MeshNormalMaterial\tTHREE.js Completion", "contents": "MeshNormalMaterial( wireframe, wireframeLinewidth, morphTargets );$0" },
		{ "trigger": "MeshPhongMaterial\tTHREE.js Completion", "contents": "MeshPhongMaterial( color, map, shading, wireframe );$0" },
		{ "trigger": "PointCloudMaterial\tTHREE.js Completion", "contents": "PointCloudMaterial( color, map, size, vertexColors );$0" },
		{ "trigger": "ShaderMaterial\tTHREE.js Completion", "contents": "ShaderMaterial( uniforms, attributes, defines, vertexShader );$0" },
		{ "trigger": "RawShaderMaterial\tTHREE.js Completion", "contents": "RawShaderMaterial( parameters );$0" },
		{ "trigger": "Bone\tTHREE.js Completion", "contents": "Bone( belongsToSkin );$0" },
		{ "trigger": "Line\tTHREE.js Completion", "contents": "Line( geometry, material, type );$0" },
		{ "trigger": "LOD\tTHREE.js Completion", "contents": "LOD( objects );$0" },
		{ "trigger": "Mesh\tTHREE.js Completion", "contents": "Mesh( geometry, material );$0" },
		{ "trigger": "MorphAnimMesh\tTHREE.js Completion", "contents": "MorphAnimMesh( geometry, material );$0" },
		{ "trigger": "Particle\tTHREE.js Completion", "contents": "Particle( material );$0" },
		{ "trigger": "ParticleSystem\tTHREE.js Completion", "contents": "ParticleSystem( geometry, material );$0" },
		{ "trigger": "Ribbon\tTHREE.js Completion", "contents": "Ribbon( geometry, material );$0" },
		{ "trigger": "SkinnedMesh\tTHREE.js Completion", "contents": "SkinnedMesh( geometry, material );$0" },
		{ "trigger": "Sprite\tTHREE.js Completion", "contents": "Sprite( parameters );$0" },

		{ "trigger": "CanvasRenderer\tTHREE.js Completion", "contents": "CanvasRenderer( parameters );$0" },
		{ "trigger": "DOMRenderer\tTHREE.js Completion", "contents": "DOMRenderer(  );$0" },
		{ "trigger": "SVGRenderer\tTHREE.js Completion", "contents": "SVGRenderer(  );$0" },
		{ "trigger": "WebGLRenderer\tTHREE.js Completion", "contents": "WebGLRenderer( parameters );$0" },
		{ "trigger": "WebGLRenderTarget\tTHREE.js Completion", "contents": "WebGLRenderTarget( width, height, options );$0" },
		{ "trigger": "WebGLRenderTargetCube\tTHREE.js Completion", "contents": "WebGLRenderTargetCube( width, height, options );$0" },
		{ "trigger": "ShaderChunk\tTHREE.js Completion", "contents": "ShaderChunk;$0" },
		{ "trigger": "ShaderLib\tTHREE.js Completion", "contents": "ShaderLib;$0" },

		{ "trigger": "RenderableFace3\tTHREE.js Completion", "contents": "RenderableFace3(  );$0" },
		{ "trigger": "RenderableFace4\tTHREE.js Completion", "contents": "RenderableFace4(  );$0" },
		{ "trigger": "RenderableLine\tTHREE.js Completion", "contents": "RenderableLine(  );$0" },
		{ "trigger": "RenderableObject\tTHREE.js Completion", "contents": "RenderableObject(  );$0" },
		{ "trigger": "RenderableParticle\tTHREE.js Completion", "contents": "RenderableParticle(  );$0" },
		{ "trigger": "RenderableVertex\tTHREE.js Completion", "contents": "RenderableVertex(  );$0" },

		{ "trigger": "Fog\tTHREE.js Completion", "contents": "Fog( hex, near, far );$0" },
		{ "trigger": "FogExp2\tTHREE.js Completion", "contents": "FogExp2( hex, density );$0" },

		{ "trigger": "Scene\tTHREE.js Completion", "contents": "Scene(  );$0" },
		
		{ "trigger": "DataTexture\tTHREE.js Completion", "contents": "DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter );$0" },
		{ "trigger": "Texture\tTHREE.js Completion", "contents": "Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type );$0" },

		{ "trigger": "ColorUtils\tTHREE.js Completion", "contents": "ColorUtils(  )$0" },
		{ "trigger": "GeometryUtils\tTHREE.js Completion", "contents": "GeometryUtils(  )$0" },
		{ "trigger": "ImageUtils\tTHREE.js Completion", "contents": "ImageUtils(  )$0" },
		{ "trigger": "SceneUtils\tTHREE.js Completion", "contents": "SceneUtils(  )$0" },
		{ "trigger": "ShaderUtils\tTHREE.js Completion", "contents": "ShaderUtils(  )$0" },

		{ "trigger": "Animation\tTHREE.js Completion", "contents": "Animation( root, data, interpolationType, JITCompile );$0" },
		{ "trigger": "AnimationHandler\tTHREE.js Completion", "contents": "AnimationHandler(  );$0" },
		{ "trigger": "AnimationMorphTarget\tTHREE.js Completion", "contents": "AnimationMorphTarget( root, data );$0" },
		{ "trigger": "KeyFrameAnimation\tTHREE.js Completion", "contents": "KeyFrameAnimation( root, data, JITCompile );$0" },

		{ "trigger": "CombinedCamera\tTHREE.js Completion", "contents": "CombinedCamera( width, height, fov, near, far, orthonear, orthofar );$0" },
		{ "trigger": "CubeCamera\tTHREE.js Completion", "contents": "CubeCamera( near, far, cubeResolution );$0" },

		{ "trigger": "FirstPersonControls\tTHREE.js Completion", "contents": "FirstPersonControls( object, domElement );$0" },
		{ "trigger": "FlyControls\tTHREE.js Completion", "contents": "FlyControls( object, domElement );$0" },
		{ "trigger": "PathControls\tTHREE.js Completion", "contents": "PathControls( object, domElement );$0" },
		{ "trigger": "RollControls\tTHREE.js Completion", "contents": "RollControls( object, domElement );$0" },
		{ "trigger": "TrackballControls\tTHREE.js Completion", "contents": "TrackballControls( object, domElement );$0" },

		{ "trigger": "BufferGeometry\tTHREE.js Completion", "contents": "BufferGeometry(  );$0" },
		{ "trigger": "Curve\tTHREE.js Completion", "contents": "Curve(  );$0" },
		{ "trigger": "CurvePath\tTHREE.js Completion", "contents": "CurvePath(  );$0" },
		{ "trigger": "EventTarget\tTHREE.js Completion", "contents": "EventTarget(  );$0" },
		{ "trigger": "Gyroscope\tTHREE.js Completion", "contents": "Gyroscope(  );$0" },
		{ "trigger": "Path\tTHREE.js Completion", "contents": "Path( points );$0" },
		{ "trigger": "Shape\tTHREE.js Completion", "contents": "Shape(  );$0" },
		{ "trigger": "ShapePath\tTHREE.js Completion", "contents": "ShapePath(  );$0" },
		{ "trigger": "TextPath\tTHREE.js Completion", "contents": "TextPath( text, parameters );$0" },
		{ "trigger": "BoxGeometry\tTHREE.js Completion", "contents": "BoxGeometry( width, height, depth, widthSegements, heightSegments, depthSegments );$0" },
		{ "trigger": "BoxBufferGeometry\tTHREE.js Completion", "contents": "BoxBufferGeometry( width, height, depth, widthSegements, heightSegments, depthSegments );$0" },
		{ "trigger": "CircleBufferGeometry\tTHREE.js Completion", "contents": "CircleBufferGeometry( radius, segments, thetaStart, thetaLength );$0" },
		{ "trigger": "CircleGeometry\tTHREE.js Completion", "contents": "CircleGeometry( radius, segments, thetaStart, thetaLength );$0" },
		{ "trigger": "ConeBufferGeometry\tTHREE.js Completion", "contents": "ConeBufferGeometry( radius, height, radiusSegments, heightSegments, openEnded, thetaStart, thetaLength );$0" },
		{ "trigger": "ConeGeometry\tTHREE.js Completion", "contents": "ConeGeometry( radius, height, radiusSegments, heightSegments, openEnded, thetaStart, thetaLength );$0" },
		{ "trigger": "CylinderBufferGeometry\tTHREE.js Completion", "contents": "CylinderBufferGeometry( radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded, thetaStart, thetaLength );$0" },
		{ "trigger": "CylinderGeometry\tTHREE.js Completion", "contents": "CylinderGeometry( radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded, thetaStart, thetaLength );$0" },
		{ "trigger": "DodecahedronBufferGeometry\tTHREE.js Completion", "contents": "DodecahedronBufferGeometry( radius, detail );$0" },
		{ "trigger": "DodecahedronGeometry\tTHREE.js Completion", "contents": "DodecahedronGeometry( radius, detail );$0" },
		{ "trigger": "EdgesGeometry\tTHREE.js Completion", "contents": "EdgesGeometry( geometry, thresholdAngle );$0" },
		{ "trigger": "ExtrudeBufferGeometry\tTHREE.js Completion", "contents": "ExtrudeBufferGeometry( shapes, options );$0" },
		{ "trigger": "ExtrudeGeometry\tTHREE.js Completion", "contents": "ExtrudeGeometry( shapes, options );$0" },
		{ "trigger": "IcosahedronBufferGeometry\tTHREE.js Completion", "contents": "IcosahedronBufferGeometry( radius, detail );$0" },
		{ "trigger": "IcosahedronGeometry\tTHREE.js Completion", "contents": "IcosahedronGeometry( radius, detail );$0" },
		{ "trigger": "LatheBufferGeometry\tTHREE.js Completion", "contents": "LatheBufferGeometry(points, segments, phiStart, phiLength );$0" },
		{ "trigger": "LatheGeometry\tTHREE.js Completion", "contents": "LatheGeometry(points, segments, phiStart, phiLength );$0" },
		{ "trigger": "OctahedronBufferGeometry\tTHREE.js Completion", "contents": "OctahedronBufferGeometry( radius, detail );$0" },
		{ "trigger": "OctahedronGeometry\tTHREE.js Completion", "contents": "OctahedronGeometry( radius, detail );$0" },
		{ "trigger": "ParametricBufferGeometry\tTHREE.js Completion", "contents": "ParametricBufferGeometry( func, slices, stacks );$0" },
		{ "trigger": "ParametricGeometry\tTHREE.js Completion", "contents": "ParametricGeometry( func, slices, stacks );$0" },
		{ "trigger": "PlaneBufferGeometry\tTHREE.js Completion", "contents": "PlaneBufferGeometry( width, height, widthSegments, heightSegments );$0" },
		{ "trigger": "PlaneGeometry\tTHREE.js Completion", "contents": "PlaneGeometry( width, height, widthSegments, heightSegments );$0" },
		{ "trigger": "PolyhedronBufferGeometry\tTHREE.js Completion", "contents": "PolyhedronBufferGeometry( vertices, faces, radius, detail );$0" },
		{ "trigger": "PolyhedronGeometry\tTHREE.js Completion", "contents": "PolyhedronGeometry( vertices, faces, radius, detail );$0" },
		{ "trigger": "RingBufferGeometry\tTHREE.js Completion", "contents": "RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength );$0" },
		{ "trigger": "RingGeometry\tTHREE.js Completion", "contents": "RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength );$0" },
		{ "trigger": "ShapeBufferGeometry\tTHREE.js Completion", "contents": "ShapeBufferGeometry( shapes, curveSegments );$0" },
		{ "trigger": "ShapeGeometry\tTHREE.js Completion", "contents": "ShapeGeometry( shapes, curveSegments );$0" },
		{ "trigger": "SphereBufferGeometry\tTHREE.js Completion", "contents": "SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength );$0" },
		{ "trigger": "SphereGeometry\tTHREE.js Completion", "contents": "SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength );$0" },
		{ "trigger": "TetrahedronBufferGeometry\tTHREE.js Completion", "contents": "TetrahedronBufferGeometry( radius, detail );$0" },
		{ "trigger": "TetrahedronGeometry\tTHREE.js Completion", "contents": "TetrahedronGeometry( radius, detail );$0" },
		{ "trigger": "TextGeometry\tTHREE.js Completion", "contents": "TextGeometry( text, parameters );$0" },
		{ "trigger": "TorusBufferGeometry\tTHREE.js Completion", "contents": "TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc );$0" },
		{ "trigger": "TorusGeometry\tTHREE.js Completion", "contents": "TorusGeometry( radius, tube, radialSegments, tubularSegments, arc );$0" },
		{ "trigger": "TorusKnotBufferGeometry\tTHREE.js Completion", "contents": "TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q );$0" },
		{ "trigger": "TorusKnotGeometry\tTHREE.js Completion", "contents": "TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q );$0" },
		{ "trigger": "TubeGeometry\tTHREE.js Completion", "contents": "TubeGeometry( path, tubularSegments, radius, radiusSegments, closed );$0" },
		{ "trigger": "TubeBufferGeometry\tTHREE.js Completion", "contents": "TubeBufferGeometry( path, tubularSegments, radius, radiusSegments, closed );$0" },
		{ "trigger": "WireframeGeometry\tU dont hefto use it all\nTHREE.js Completion", "contents": "WireframeGeometry( geometry );$0" },
		{ "trigger": "ArrowHelper\tTHREE.js Completion", "contents": "ArrowHelper( dir, origin, length, hex, headLength, headWidth );$0" },
		{ "trigger": "AxisHelper\tTHREE.js Completion", "contents": "AxisHelper( size );$0" },
		{ "trigger": "BoxHelper\tTHREE.js Completion", "contents": "BoxHelper( object, color );$0" },
		{ "trigger": "CameraHelper\tTHREE.js Completion", "contents": "CameraHelper( camera );$0" },
		{ "trigger": "DirectionalLightHelper\tTHREE.js Completion", "contents": "DirectionalLightHelper( light, size );$0" },
		{ "trigger": "FaceNormalsHelper\tTHREE.js Completion", "contents": "FaceNormalsHelper( object, size, color, linewidth );$0" },
		{ "trigger": "GridHelper\tTHREE.js Completion", "contents": "GridHelper( size, divisions, colorCenterLine, colorGrid );$0" },
		{ "trigger": "PolarGridHelper\tTHREE.js Completion", "contents": "PolarGridHelper( radius, radials, circles, divisions, color1, color2 );$0" },
		{ "trigger": "HemisphereLight\tTHREE.js Completion", "contents": "HemisphereLight( skyColor, groundColor, intensity );$0" },

		{ "trigger": "HemisphereLightHelper\tTHREE.js Completion", "contents": "HemisphereLightHelper( light, sphereSize );$0" },
		{ "trigger": "PointLightHelper\tTHREE.js Completion", "contents": "PointLightHelper( light, sphereSize );$0" },
		{ "trigger": "RectAreaLight\tTHREE.js Completion", "contents": "RectAreaLight( color, intensity, width, height );$0" },
		{ "trigger": "RectAreaLightHelper\tTHREE.js Completion", "contents": "RectAreaLightHelper( light );$0" },
		{ "trigger": "SkeletonHelper\tTHREE.js Completion", "contents": "SkeletonHelper( object );$0" },
		{ "trigger": "SpotLightHelper\tTHREE.js Completion", "contents": "SpotLightHelper( light );$0" },
		{ "trigger": "VertexNormalsHelper\tTHREE.js Completion", "contents": "VertexNormalsHelper( object, size, color, linewidth );$0" },
		{ "trigger": "DirectionalLightShadow\tTHREE.js Completion", "contents": "DirectionalLightShadow( );$0" },
		{ "trigger": "LightShadow\tTHREE.js Completion", "contents": "LightShadow( camera );$0" },
		{ "trigger": "RectAreaLightShadow\tTHREE.js Completion", "contents": "RectAreaLightShadow( camera );$0" },
		{ "trigger": "AnimationLoader\tTHREE.js Completion", "contents": "AnimationLoader( manager );$0" },
		{ "trigger": "BufferGeometryLoader\tTHREE.js Completion", "contents": "BufferGeometryLoader( manager );$0" },
		{ "trigger": "CompressedTextureLoader\tTHREE.js Completion", "contents": "CompressedTextureLoader( manager );$0" },
		{ "trigger": "CubeTextureLoader\tTHREE.js Completion", "contents": "CubeTextureLoader( manager );$0" },
		{ "trigger": "DataTextureLoader\tTHREE.js Completion", "contents": "DataTextureLoader( manager );$0" },
		{ "trigger": "FileLoader\tTHREE.js Completion", "contents": "FileLoader( manager );$0" },
		{ "trigger": "FontLoader\tTHREE.js Completion", "contents": "FontLoader( manager );$0" },
		{ "trigger": "ImageLoader\tTHREE.js Completion", "contents": "ImageLoader( manager );$0" },
		{ "trigger": "JSONLoader\tTHREE.js Completion", "contents": "JSONLoader( manager );$0" },
		{ "trigger": "MaterialLoader\tTHREE.js Completion", "contents": "MaterialLoader( manager );$0" },
		{ "trigger": "ObjectLoader\tTHREE.js Completion", "contents": "ObjectLoader( manager );$0" },
		{ "trigger": "TextureLoader\tTHREE.js Completion", "contents": "TextureLoader( manager );$0" },
		{ "trigger": "LoadingManager\tTHREE.js Completion", "contents": "LoadingManager( onLoad, onProgress, onError );$0" },
		{ "trigger": "LineBasicMaterial\tTHREE.js Completion", "contents": "LineBasicMaterial( color, isLineBasicMaterial, lights, linewidth, linecap, linejoin );$0" },
		{ "trigger": "LineDashedMaterial\tTHREE.js Completion", "contents": "LineDashedMaterial( color, dashSIze, gapSize, isLineBasicMaterial, lights, linewidth, scale );$0" },
		{ "trigger": "Material\tTHREE.js Completion", "contents": "Material( alphaTest, blendDst, blendDstAlpha, blendEquation, blendEquationAlpha, blendSrc, blendSrcAlpha, clipIntersection, clippingPlanes, clipShadows, colorWrite, customDepthMaterial, customDistanceMaterial, defines, depthFunc, depthTest, depthWrite, fog, id, isMaterial, lights, name, needsUpdate, opacity, overdraw, polygnOffset, polygnOffsetFactor, polygnOffsetUnits, precision, premultipliedAlpha, dithering, shading, side, transparent, type, vertexColors, visible );$0" },
		{ "trigger": "MeshBasicMaterial\tTHREE.js Completion", "contents": "MeshBasicMaterial(  );$0" },
		{ "trigger": "MeshDepthMaterial\tTHREE.js Completion", "contents": "MeshDepthMaterial(  );$0" },
		{ "trigger": "MeshLambertMaterial\tTHREE.js Completion", "contents": "MeshLambertMaterial(  );$0" },
		{ "trigger": "MeshNormalMaterial\tTHREE.js Completion", "contents": "MeshNormalMaterial(  );$0" },
		{ "trigger": "MeshPhongMaterial\tTHREE.js Completion", "contents": "MeshPhongMaterial(  );$0" },
		{ "trigger": "MeshPhysicalMaterial\tTHREE.js Completion", "contents": "MeshPhysicalMaterial(  );$0" },
		{ "trigger": "MeshStandardMaterial\tTHREE.js Completion", "contents": "MeshStandardMaterial(  );$0" },
		{ "trigger": "MeshToonMaterial\tTHREE.js Completion", "contents": "MeshToonMaterial(  );$0" },
		{ "trigger": "PointsMaterial\tTHREE.js Completion", "contents": "PointsMaterial(  );$0" },
		{ "trigger": "RawShaderMaterial\tTHREE.js Completion", "contents": "RawShaderMaterial(  );$0" },
		{ "trigger": "ShaderMaterial\tTHREE.js Completion", "contents": "ShaderMaterial(  );$0" },
		{ "trigger": "ShadowMaterial\tTHREE.js Completion", "contents": "ShadowMaterial(  );$0" },
		{ "trigger": "SpriteMaterial\tTHREE.js Completion", "contents": "SpriteMaterial(  );$0" },
		{ "trigger": "Box2\tTHREE.js Completion", "contents": "Box2( min, max );$0" },
		{ "trigger": "Box3\tTHREE.js Completion", "contents": "Box3( min, max );$0" },
		{ "trigger": "Color\tTHREE.js Completion", "contents": "Color( r, g, b );$0" },
		{ "trigger": "Cylindrical\tTHREE.js Completion", "contents": "Cylindrical( radius, theta, y );$0" },
		{ "trigger": "Euler\tTHREE.js Completion", "contents": "Euler( x, y, z, order );$0" },
		{ "trigger": "Frustum\tTHREE.js Completion", "contents": "Frustum(p0, p1, p2, p3, p4, p5);$0" },
		{ "trigger": "Interpolant\tTHREE.js Completion", "contents": "Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer );$0" },
		{ "trigger": "Line3\tTHREE.js Completion", "contents": "Line3( start, end );$0" },
		{ "trigger": "Matrix3\tTHREE.js Completion", "contents": "Matrix3(  );$0" },
		{ "trigger": "Matrix4\tTHREE.js Completion", "contents": "Matrix4(  );$0" },
		{ "trigger": "Plane\tTHREE.js Completion", "contents": "Plane( normal, constant );$0" },
		{ "trigger": "Quaternion\tTHREE.js Completion", "contents": "Quaternion( x, y, z, w );$0" },
		{ "trigger": "Ray\tTHREE.js Completion", "contents": "Ray( origin, direction );$0" },
		{ "trigger": "Sphere\tTHREE.js Completion", "contents": "Sphere( center, radius );$0" },
		{ "trigger": "Spherical\tTHREE.js Completion", "contents": "Spherical( radius, phi, theta );$0" },
		{ "trigger": "Triangle\tTHREE.js Completion", "contents": "Triangle( a, b, c );$0" },
		{ "trigger": "Vector2\tTHREE.js Completion", "contents": "Vector2( x, y );$0" },
		{ "trigger": "Vector3\tTHREE.js Completion", "contents": "Vector3( x, y, z );$0" },
		{ "trigger": "Vector4\tTHREE.js Completion", "contents": "Vector4( x, y, z, w );$0" },
		{ "trigger": "CubicInterpolant\tTHREE.js Completion", "contents": "CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer );$0" },
		{ "trigger": "DiscreteInterpolant\tTHREE.js Completion", "contents": "DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer );$0" },
		{ "trigger": "LinearInterpolant\tTHREE.js Completion", "contents": "LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer );$0" },
		{ "trigger": "QuaternionLinearInterpolant\tTHREE.js Completion", "contents": "QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer );$0" },
		{ "trigger": "Bone\tTHREE.js Completion", "contents": "Bone( );$0" },
		{ "trigger": "Group\tTHREE.js Completion", "contents": "Group( );$0" },
		{ "trigger": "LensFlare\tTHREE.js Completion", "contents": "LensFlare( texture, size, distance, blending, color );$0" },
		{ "trigger": "LineLoop\tTHREE.js Completion", "contents": "Line( geometry, material );$0" },
		{ "trigger": "Line\tTHREE.js Completion", "contents": "LineLoop( geometry, material );$0" },
		{ "trigger": "LineSegments\tTHREE.js Completion", "contents": "LineSegments( geometry, material );$0" },
		{ "trigger": "LOD\tTHREE.js Completion", "contents": "LOD( );$0" },
		{ "trigger": "Mesh\tTHREE.js Completion", "contents": "Mesh( geometry, material );$0" },
		{ "trigger": "Points\tTHREE.js Completion", "contents": "Points( geometry, material );$0" },
		{ "trigger": "Skeleton\tTHREE.js Completion", "contents": "Skeleton( bones, boneInverses );$0" },
		{ "trigger": "SkinnedMesh\tTHREE.js Completion", "contents": "SkinnedMesh( geometry, material );$0" },
		{ "trigger": "Sprite\tTHREE.js Completion", "contents": "Sprite( material );$0" },
		{ "trigger": "UniformsLib\tTHREE.js Completion", "contents": "UniformsLib;$0" },
		{ "trigger": "UniformsUtils\tTHREE.js Completion", "contents": "UniformsUtils;$0" },
		{ "trigger": "CanvasTexture\tTHREE.js Completion", "contents": "CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );$0" },
		{ "trigger": "CompressedTexture\tTHREE.js Completion", "contents": "CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy );$0" },
		{ "trigger": "CubeTexture\tTHREE.js Completion", "contents": "CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );$0" },
		{ "trigger": "DataTexture\tTHREE.js Completion", "contents": "DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy );$0" },
		{ "trigger": "DepthTexture\tTHREE.js Completion", "contents": "DepthTexture( width, height, type, wrapS, wrapT, magFilter, minFilter, anisotropy, format );$0" },
		{ "trigger": "Texture\tTHREE.js Completion", "contents": "Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );$0" },
		{ "trigger": "VideoTexture\tTHREE.js Completion", "contents": "VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );$0" },
		{ "trigger": "Collada\tTHREE.js Completion", "contents": "Animation(root, name);$0" },
		{ "trigger": "AnimationHandler\tTHREE.js Completion", "contents": "AnimationHandler(  );$0" },
		{ "trigger": "KeyFrameAnimation\tTHREE.js Completion", "contents": "KeyFrameAnimation( data );$0" },
		{ "trigger": "ConvexBufferGeometry\tTHREE.js Completion", "contents": "ConvexBufferGeometry( points );$0" },
		{ "trigger": "ConvexGeometry\tTHREE.js Completion", "contents": "ConvexGeometry( points );$0" },
		{ "trigger": "BabylonLoader\tTHREE.js Completion", "contents": "BabylonLoader( manager );$0" },
		{ "trigger": "ColladaLoader\tTHREE.js Completion", "contents": "ColladaLoader(  );$0" },
		{ "trigger": "GLTF2Loader\tTHREE.js Completion", "contents": "GLTF2Loader( manager );$0" },
		{ "trigger": "MTLLoader\tTHREE.js Completion", "contents": "MTLLoader( loadingManager );$0" },
		{ "trigger": "OBJLoader\tTHREE.js Completion", "contents": "OBJLoader( manager );$0" },
		{ "trigger": "OBJLoader2\tTHREE.js Completion", "contents": "OBJLoader2( manager );$0" },
		{ "trigger": "WWOBJLoader2\tTHREE.js Completion", "contents": "WWOBJLoader2(  );$0" },
		{ "trigger": "PCDLoader\tTHREE.js Completion", "contents": "PCDLoader( manager );$0" },
		{ "trigger": "PDBLoader\tTHREE.js Completion", "contents": "PDBLoader( manager );$0" },
		{ "trigger": "SVGLoader\tTHREE.js Completion", "contents": "SVGLoader( manager );$0" },
		{ "trigger": "TGALoader\tTHREE.js Completion", "contents": "TGALoader( manager );$0" },
		{ "trigger": "Lut\tTHREE.js Completion", "contents": "Lut( colormap, numberOfColors );$0" },
		{ "trigger": "SpriteCanvasMaterial\tTHREE.js Completion", "contents": "SpriteCanvasMaterial( parameters );$0" },
		{ "trigger": "Face\tTHREE.js Completion", "contents": "Face(  );$0" },
		{ "trigger": "HalfEdge\tTHREE.js Completion", "contents": "HalfEdge( vertex, face );$0" },
		{ "trigger": "QuickHull\tTHREE.js Completion", "contents": "QuickHull(  );$0" },
		{ "trigger": "VertexNode\tTHREE.js Completion", "contents": "VertexNode( point );$0" },
		{ "trigger": "VertexList\tTHREE.js Completion", "contents": "VertexList(  );$0" },
		{ "trigger": "WebGLProgram\tTHREE.js Completion", "contents": "WebGLProgram( renderer, code, material, parameters );$0" },
		{ "trigger": "WebGLShader\tTHREE.js Completion", "contents": "WebGLShader( gl, type, source );$0" },
		{ "trigger": "LensFlarePlugin\tTHREE.js Completion", "contents": "LensFlarePlugin(  );$0" },
		{ "trigger": "SpritePlugin\tTHREE.js Completion", "contents": "SpritePlugin(  );$0" }
	 ]
}